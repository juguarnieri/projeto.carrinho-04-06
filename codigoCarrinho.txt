// Definição dos pinos conectados aos motores e ao módulo Bluetooth
#define pinMotor1A 2 // Pino do Motor 1A
#define pinMotor1B 3 // Pino do Motor 1B
#define pinMotor2A 5 // Pino do Motor 2A
#define pinMotor2B 4 // Pino do Motor 2B
#define pinBtRx 7    // Pino Rx do módulo Bluetooth
#define pinBtTx 8    // Pino Tx do módulo Bluetooth

// Biblioteca para comunicação com módulo Bluetooth.
#include <SoftwareSerial.h> // Inclui a biblioteca SoftwareSerial
SoftwareSerial bluetooth(pinBtRx, pinBtTx); // Cria uma instância de SoftwareSerial.

void setup() {
  // Configura o estado das portas do Arduino como saídas para controlar os motores.
  pinMode(pinMotor1A, OUTPUT); // Configura pinMotor1A como saída.
  pinMode(pinMotor1B, OUTPUT); // Configura pinMotor1B como saída.
  pinMode(pinMotor2A, OUTPUT); // Configura pinMotor2A como saída.
  pinMode(pinMotor2B, OUTPUT); // Configura pinMotor2B como saída.

  // Configura os pinos adicionais como saídas e define-os como LOW
  pinMode(13, OUTPUT); // Configura pino 13 como saída
  digitalWrite(13, LOW); // Define pino 13 como LOW


  // Inicia a comunicação serial para monitorar o que está acontecendo pelo monitor serial
  Serial.begin(9600); // Inicia comunicação serial a 9600 bps

  // Inicia a comunicação serial com o módulo Bluetooth
  bluetooth.begin(9600); // Inicia comunicação com o módulo Bluetooth a 9600 bps
}

void loop() {
  // Variável para armazenar o dado recebido via Bluetooth.
  char recebido; // Declara variável 'recebido' para armazenar o dado recebido

  // Verifica se há dados disponíveis no módulo Bluetooth
  if (bluetooth.available()) { // Se há dados disponíveis.
    recebido = bluetooth.read(); // Lê o dado recebido e armazena em 'recebido'.
    Serial.write(recebido); // Envia o dado recebido para o monitor serial.
    Serial.println("- "); // Adiciona uma nova linha no monitor serial.
  }

  // Comandos de controle de movimento com base no dado recebido
  if (recebido == 'F') {   // Se o comando é 'F' (Forward - Frente)
    digitalWrite(pinMotor1A, LOW); // Desliga pinMotor1A
    digitalWrite(pinMotor1B, HIGH); // Liga pinMotor1B
    digitalWrite(pinMotor2A, LOW); // Desliga pinMotor2A
    digitalWrite(pinMotor2B, HIGH); // Liga pinMotor2B
  }
  else if (recebido == 'B') {   // Se o comando é 'B' (Backward - Ré)
    digitalWrite(pinMotor1A, HIGH); // Liga pinMotor1A
    digitalWrite(pinMotor1B, LOW); // Desliga pinMotor1B
    digitalWrite(pinMotor2A, HIGH); // Liga pinMotor2A
    digitalWrite(pinMotor2B, LOW); // Desliga pinMotor2B
  }
  else if (recebido == 'L') {   // Se o comando é 'L' (Left - Esquerda)
    digitalWrite(pinMotor1A, LOW); // Desliga pinMotor1A
    digitalWrite(pinMotor1B, LOW); // Desliga pinMotor1B
    digitalWrite(pinMotor2A, HIGH); // Liga pinMotor2A
    digitalWrite(pinMotor2B, LOW); // Desliga pinMotor2B
  }
  else if (recebido == 'R') {   // Se o comando é 'R' (Right - Direita)
    digitalWrite(pinMotor1A, HIGH); // Liga pinMotor1A
    digitalWrite(pinMotor1B, LOW); // Desliga pinMotor1B
    digitalWrite(pinMotor2A, LOW); // Desliga pinMotor2A
    digitalWrite(pinMotor2B, LOW); // Desliga pinMotor2B
  }
  else if (recebido == 'S') {   // Se o comando é 'S' (Stop - Parado)
    digitalWrite(pinMotor1A, LOW); // Desliga pinMotor1A
    digitalWrite(pinMotor1B, LOW); // Desliga pinMotor1B
    digitalWrite(pinMotor2A, LOW); // Desliga pinMotor2A
    digitalWrite(pinMotor2B, LOW); // Desliga pinMotor2B
  }
}